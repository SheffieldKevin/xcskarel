#!/usr/bin/env ruby

$LOAD_PATH.push File.expand_path('../../lib', __FILE__)

require 'XCSKarel'
require 'rubygems'
require 'commander'

XCSKarel.set_no_log(true)

class XCSKarelApplication
  include Commander::Methods

  def add_xcs_options(c)
    c.option '--host Hostname', '(required) Xcode Server\'s hostname or IP address (default: localhost)'
    c.option '--user Username', 'Xcode Server username'
    c.option '--pass Password', 'Xcode Server password'
  end

  def create_server_from_options(options)
    host = options.host || "localhost"
    XCSKarel::Server.new(host, options.user, options.pass)
  end

  def run
    program :name, 'xcskarel'
    program :version, XCSKarel::VERSION
    program :description, 'Tool for managing your Xcode Server & Bot configurations'
    program :help, 'Author', 'Honza Dvorsky <http://honzadvorsky.com>'
    program :help, 'GitHub', 'https://github.com/czechboy0/xcskarel'

    global_option('--verbose', 'Print internal logs') { XCSKarel.set_no_log(false) }
    global_option('--no_pretty', 'Disables output JSON prettification')
    global_option('--no_filter', 'Prints full JSON payload for objects instead of just filtering the important ones')

    # Managing local xcsconfig folder

    command :'config list' do |c|
      c.syntax = 'xcskarel config [options]'
      c.description = 'Lists the Xcode Bot configurations found in this folder'
      c.action do |args, options|
        config_folder = XCSKarel::XCSFile.get_config_folder
        return unless config_folder
        configs = XCSKarel::XCSFile.load_configs(config_folder)
        if configs.count == 0
          XCSKarel.log.info "Found no existing configs in #{config_folder}".yellow
        else
          out = "\n" + configs.map { |c| "#{File.basename(c.path)}".yellow + " - from " + "\"#{c.name}\"".yellow + ", created at #{c.created}" }.join("\n")
          XCSKarel.log.info "Found #{configs.count} configs in \"#{config_folder}\":"
          XCSKarel.log.info out
        end
      end
    end

    command :'config new' do |c|
      c.syntax = 'xcskarel config new [options]'
      c.description = 'Starts the interactive process of creating a new config from an existing Bot'
      add_xcs_options(c)
      c.action do |args, options|
        
        # let user chose a bot from the server
        server = create_server_from_options(options)
        bot = XCSKarel::Application.choose_bot(server)

        # get our config folder
        config_folder = XCSKarel::XCSFile.get_config_folder
        return unless config_folder

        # dump the bot into that config folder under a random name
        new_config_path = XCSKarel::XCSFile.new_config_name(config_folder)
        new_config = XCSKarel::Config.new(bot, server.api_version, new_config_path)
        new_config.save

        XCSKarel.log.info "Saved Bot \"#{new_config.name}\" configuration to #{new_config_path}.".green
        system "open \"#{new_config_path}\""
      end
    end

    # Talking to Xcode Server API

    command :bots do |c|
      c.syntax = 'xcskarel bots [options]'
      c.description = 'Fetches all Bots found on the specified server'
      c.example 'get all bot names & identifiers', 'xcskarel bots --hostname 127.0.0.1'
      c.example 'get all bot metadata', 'xcskarel bots --no_filter --hostname 127.0.0.1'
      add_xcs_options(c)
      c.action do |args, options|
        server = create_server_from_options(options)
        all_bots = server.get_bots
        # create Bot instances
        # bot_objs = all_bots.map { |json| XCSKarel::Bot.new(json) }
        # bot_files = bot_objs.map { |bot| name = "./xcskarel/#{bot.json['_id']}.json"; bot.to_file(name); name }
        unless options.no_filter
          all_bots = XCSKarel::Filter.filter_key_paths(all_bots, ['name', '_id'])
        end
        out = options.no_pretty ? JSON.generate(all_bots) : JSON.pretty_generate(all_bots)
        puts out
      end
    end

    command :integrations do |c|
      c.syntax = 'xcskarel integrations [options]'
      c.description = 'Fetches all Integrations for a specified Bot identifier'
      c.example 'get all integration identifiers, numbers & results', 'xcskarel integrations --bot BOT_ID --hostname 127.0.0.1'
      add_xcs_options(c)
      c.option '--bot BOT_ID', '(required) Bot identifier'
      c.action do |args, options|
        raise "No Bot id was specified, please see `xcskarel integrations --help`" unless options.bot
        server = create_server_from_options(options)
        all_integrations = server.get_integrations(options.bot)
        unless options.no_filter
          all_integrations = XCSKarel::Filter.filter_key_paths(all_integrations, ['number', '_id', 'currentStep', 'result'])
        end
        out = options.no_pretty ? JSON.generate(all_integrations) : JSON.pretty_generate(all_integrations)
        puts out
      end
    end

    command :health do |c|
      c.syntax = 'xcskarel health [options]'
      c.description = 'Fetches health information of the specified server'
      c.example 'get health', 'xcskarel health --hostname 127.0.0.1'
      add_xcs_options(c)
      c.action do |args, options|
        server = create_server_from_options(options)
        all_health = server.get_health
        unless options.no_filter
          all_health = XCSKarel::Filter.filter_key_paths(all_health, ['uptime'])
        end
        out = options.no_pretty ? JSON.generate(all_health) : JSON.pretty_generate(all_health)
        puts out
      end
    end

    # Managing a local Xcode Server

    command :'server start' do |c|
      c.syntax = 'xcskarel server start [options]'
      c.description = 'Start local Xcode Server'
      c.example 'start xcode server', 'xcskarel server start --path /Applications/Xcode.app'
      c.option '--path XCODE_PATH', 'Xcode path'
      c.action do |args, options|
        xcode = options.path
        unless options.path
          xcodes = XCSKarel::Control.installed_xcodes
          raise "No Xcode found, please provide --path" if xcodes.count == 0
          if xcodes.count > 1
            choice = choose("Select Xcode version", *xcodes) 
            xcode = choice
          else
            xcode = xcodes.first
          end
        end

        XCSKarel::Control.start(xcode)
      end
    end

    command :'server stop' do |c|
      c.syntax = 'xcskarel server stop'
      c.description = 'Stop local Xcode Server'
      c.example 'stop xcode server', 'xcskarel server stop'
      c.action do |args, options|
        XCSKarel::Control.stop
      end
    end

    command :'server restart' do |c|
      c.syntax = 'xcskarel server restart'
      c.description = 'Restart local Xcode Server'
      c.example 'restart xcode server', 'xcskarel server restart'
      c.action do |args, options|
        XCSKarel::Control.restart
      end
    end

    command :'server reset' do |c|
      c.syntax = 'xcskarel server reset'
      c.description = 'Reset local Xcode Server (!!! Deletes all local Bots & Integrations !!!)'
      c.example 'reset xcode server', 'xcskarel server reset'
      c.action do |args, options|
        resp = agree("Are you sure you want to reset your local Xcode Server? This will delete all local Bots and Integrations! (y/n)".red)
        XCSKarel::Control.reset if resp
      end
    end

    # Managing Xcode

    command :'xcode select' do |c|
      c.syntax = 'xcskarel xcode select'
      c.description = 'Interactive xcode-select'
      c.example 'choose xcode', 'xcskarel xcode select'
      c.action do |args, options|
        xcodes = XCSKarel::Control.installed_xcodes
        raise "No Xcode found" if xcodes.count == 0
        xcode = choose("Select Xcode version", *xcodes) 
        XCSKarel::Control.select(xcode)
      end
    end

    default_command :help

    run!
  end
end

XCSKarelApplication.new.run




