#!/usr/bin/env ruby

$LOAD_PATH.push File.expand_path('../../lib', __FILE__)

require 'xcskarel'
require 'rubygems'
require 'commander'

XCSKarel.set_no_log(true)

class XCSKarelApplication
  include Commander::Methods

  def add_xcs_options(c)
    c.option '--host Hostname', '(required) Xcode Server\'s hostname or IP address'
    c.option '--user Username', 'Xcode Server username'
    c.option '--pass Password', 'Xcode Server password'
  end

  def create_server_from_options(options)
    raise "No hostname was specified, please see `xcskarel --help`" unless options.host
    XCSKarel::Server.new(options.host, options.user, options.pass)
  end

  def run
    program :name, 'xcskarel'
    program :version, XCSKarel::VERSION
    program :description, 'Tool for managing your Xcode Server & Bot configurations'
    program :help, 'Author', 'Honza Dvorsky <http://honzadvorsky.com>'
    program :help, 'GitHub', 'https://github.com/czechboy0/xcskarel'

    global_option('--verbose', 'Print internal logs') { XCSKarel.set_no_log(false) }
    global_option('--no_pretty', 'Disables output JSON prettification')
    global_option('--no_filter', 'Prints full JSON payload for objects instead of just filtering the important ones')

    command :bots do |c|
      c.syntax = 'xcskarel bots [options]'
      c.description = 'Fetches all Bots found on the specified server'
      c.example 'get all bot names & identifiers', 'xcskarel bots --hostname 127.0.0.1'
      c.example 'get all bot metadata', 'xcskarel bots --no_filter --hostname 127.0.0.1'
      add_xcs_options(c)
      c.action do |args, options|
        server = create_server_from_options(options)
        all_bots = server.get_bots
        unless options.no_filter
          all_bots = XCSKarel.filter_array(all_bots, ['name', '_id'])
        end
        out = options.no_pretty ? JSON.generate(all_bots) : JSON.pretty_generate(all_bots)
        puts out
      end
    end

    command :integrations do |c|
      c.syntax = 'xcskarel integrations [options]'
      c.description = 'Fetches all Integrations for a specified Bot identifier'
      c.example 'get all integration identifiers, numbers & results', 'xcskarel integrations --bot BOT_ID --hostname 127.0.0.1'
      add_xcs_options(c)
      c.option '--bot BOT_ID', '(required) Bot identifier'
      c.action do |args, options|
        raise "No Bot id was specified, please see `xcskarel integrations --help`" unless options.bot
        server = create_server_from_options(options)
        all_integrations = server.get_integrations(options.bot)
        unless options.no_filter
          all_integrations = XCSKarel.filter_array(all_integrations, ['number', '_id', 'currentStep', 'result'])
        end
        out = options.no_pretty ? JSON.generate(all_integrations) : JSON.pretty_generate(all_integrations)
        puts out
      end
    end

    command :health do |c|
      c.syntax = 'xcskarel health [options]'
      c.description = 'Fetches health information of the specified server'
      c.example 'get health', 'xcskarel health --hostname 127.0.0.1'
      add_xcs_options(c)
      c.action do |args, options|
        server = create_server_from_options(options)
        all_health = server.get_health
        unless options.no_filter
          all_health = XCSKarel.filter_key_paths(all_health, ['uptime'])
        end
        out = options.no_pretty ? JSON.generate(all_health) : JSON.pretty_generate(all_health)
        puts out
      end
    end

    command :'server start' do |c|
      c.syntax = 'xcskarel server start [options]'
      c.description = 'Start local Xcode Server'
      c.example 'start xcode server', 'xcskarel server start --path /Applications/Xcode.app'
      c.option '--path XCODE_PATH', 'Xcode path'
      c.action do |args, options|
        xcode = options.path
        unless options.path
          xcodes = XCSKarel::Control.installed_xcodes
          raise "No Xcode found, please provide --path" if xcodes.count == 0
          if xcodes.count > 1
            choice = choose("Select Xcode version", *xcodes) 
            xcode = choice
          else
            xcode = xcodes.first
          end
        end

        XCSKarel::Control.start(xcode)
      end
    end

    command :'server stop' do |c|
      c.syntax = 'xcskarel server stop'
      c.description = 'Stop local Xcode Server'
      c.example 'stop xcode server', 'xcskarel server stop'
      c.action do |args, options|
        XCSKarel::Control.stop
      end
    end

    command :'server restart' do |c|
      c.syntax = 'xcskarel server restart'
      c.description = 'Restart local Xcode Server'
      c.example 'restart xcode server', 'xcskarel server restart'
      c.action do |args, options|
        XCSKarel::Control.restart
      end
    end

    command :'server reset' do |c|
      c.syntax = 'xcskarel server reset'
      c.description = 'Reset local Xcode Server (!!! Deletes all local Bots & Integrations !!!)'
      c.example 'reset xcode server', 'xcskarel server reset'
      c.action do |args, options|
        resp = agree("Are you sure you want to reset your local Xcode Server? This will delete all local Bots and Integrations! (y/n)".red)
        XCSKarel::Control.reset if resp
      end
    end

    command :'xcode select' do |c|
      c.syntax = 'xcskarel xcode select'
      c.description = 'Interactive xcode-select'
      c.example 'choose xcode', 'xcskarel xcode select'
      c.action do |args, options|
        xcodes = XCSKarel::Control.installed_xcodes
        raise "No Xcode found" if xcodes.count == 0
        xcode = choose("Select Xcode version", *xcodes) 
        XCSKarel::Control.select(xcode)
      end
    end

    default_command :help

    run!
  end
end

XCSKarelApplication.new.run




